search()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find.packags("rtools")
install.packages("rtools")
install.packages("rtools")
find.packages("rtools")
find.package("rtools")
find.packages("rtools")
find.package("rtools")
find_rtools()
find.package("rtools")
library(devtools)
library(rtools)
find.package("rtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
fid.package("KernSmooth")
find.package("KernSmooth")
library(KernSmooth)
echo # datasciencecoursera >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/cguirelli/datasciencecoursera.git
git push -u origin master
install.packages("swirl")
library("swirl")
swirl()
library("swirl")
swirl()
num_vect <- [0.5 55 -10 6]
num_vect <- (0.5 55 -10 6)
num_vect <- c(0.5 55 -10 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_Char
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char , "Cleber")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"),sep = "")
paste(1:3,c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
}
}
x^3
cube(3)
cube(3)
cube(3)
x^3}
}
cube(3)
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) { x <- 0}
}
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
clear
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) { x <- 0}
#x <- 1:10
cube(3)
cube(3)
x^3
cube <- function(x, n) {
x^3
}
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
cube(3)
#x <- 1:10
#if(x > 5) { x <- 0}
library (swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(cnames,my_data)
?colnames
colnames(my_data) <- cnames
my_data
q()
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
abs(x[1]-x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
abs(x[1]-x[3])
abs(x[3]-x[1])
library(swril)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
pause()
pause
quit
pause
pasue()
stop
q()
source('~/.active-rstudio-document')
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- makevector(c(1,2,3))
makevector
makeVector
makeVector(c(1,2,3))
x <- makeVector(c(1,2,3))
x
setmean
$setmean
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
source('~/.active-rstudio-document')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean
cachemean(1,2,3)
cachemean(c(1,2,3))
cachemean(list(1,2,3))
makeVector(1,2,3,4,5)
setwd("C:/Users/Cleber/ProgrammingAssignment2")
?mean
?solve
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B <= matrix( c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
matrix( c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
b <- matrix( c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
b
solve(b)
b <- matrix( c(2, 4, 3, 1, ),  nrow=2,  ncol=2)
b <- matrix( c(2, 4, 3, 1 ),  nrow=2,  ncol=2)
solve(b)
source('C:/Users/Cleber/ProgrammingAssignment2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
b
makeCacheMatrix
makeCacheMatrix(b)
makeCacheMatrix
makeCacheMatrix[1]
makeCacheMatrix(1)
head(makeCacheMatrix)
cacheSolve(b)
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
exampleMatrix
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector
cacheSolve(exampleMatrix)
cacheSolve(exampleMatrix)
matrixVector
matrixVector$getmean
source('~/.active-rstudio-document')
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
message("teste")
m <- x$getmean()
m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
cacheSolve(exampleMatrix)
matrixVector$getmean
matrixVector$getmean()
source('~/.active-rstudio-document')
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
message("teste")
m <- x$getmean
m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
cacheSolve(exampleMatrix)
exampleMatrix$getmean
exampleMatrix$getmean()
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
matrixVector <- makeCacheMatrix(exampleMatrix)
cacheSolve(exampleMatrix)
message("teste")
cacheSolve(matrixVector)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
matrixVector <- makeCacheMatrix(exampleMatrix)
cacheSolve(matrixVector)
matrixVector$get()
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
matrixVector <- makeCacheMatrix(exampleMatrix)
cacheSolve(matrixVector)
source('~/.active-rstudio-document')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
set_inv <- function(inverse) i <<- inverse
get_inv <- function() i
list(set = set, get = get,set_inv = set_inv,get_inv = get_inv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_inv
if(!is.null(m)) {   message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inv(m)
m
}
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
matrixVector <- makeCacheMatrix(exampleMatrix)
cacheSolve(matrixVector)
matrixVector$get()
matrixVector$get_inv()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
matrixVector <- makeCacheMatrix(exampleMatrix)
cacheSolve(matrixVector)
matrixVector$get_inv
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get_inv
matrixVector$set_inv()
matrixVector$set_inv("")
matrixVector$get_inv
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
teste <- makeCacheMatrix(exampleMatrix)
teste$get()
teste$get_inv()
cacheSolve(teste)
teste$get_inv()
teste$get_inv()
is.null(teste$get_inv())
source('~/.active-rstudio-document')
cacheSolve(teste)
teste$get_inv()
